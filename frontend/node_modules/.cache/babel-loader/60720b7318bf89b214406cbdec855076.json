{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nissa\\\\Desktop\\\\SKULE\\\\4th Year\\\\ECE444\\\\code\\\\project-1-web-application-design-education-pathways-group-1-agility\\\\Education_Pathways\\\\frontend\\\\src\\\\components\\\\SearchCompare.js\";\nimport React, { Component } from \"react\";\nimport axios from \"../axiosInstance/AxiosInstance\";\nimport Result from \"./Results\";\nimport Spinner from \"./Spinner\";\nimport \"./css/Result.css\";\nimport Label from \"./Label\";\nimport \"./css/styles.css\";\nimport ResultCompare from \"./ResultCompare\"; //Returns an array of unique values for the given database attribute, s\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function getDropdownValues(s) {\n  let dropdownValues = [];\n\n  try {\n    let res = await axios.get('/courses/'.concat(s));\n    dropdownValues = res.data;\n  } catch (error) {\n    dropdownValues = [\"Error. Failed to retrieve dropdown values\"];\n  }\n\n  return dropdownValues;\n}\n\n; // Returns An array of dictionaries for numerical dropdown values  Used for\n// minLevel and maxLevel dropdowns\n\nfunction arrayDictNumbers(minVal, maxVal) {\n  let arr_dict = [];\n\n  for (var i = minVal; i <= maxVal; i++) {\n    arr_dict.push({\n      value: i.toString(),\n      text: i.toString()\n    });\n  }\n\n  ;\n  return arr_dict;\n} // The primary component of this file. Allows users to search, filter, and\n// access results\n\n\nclass SearchBarCompare extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = event => {\n      const value = event.target.value;\n      this.setState({\n        [event.target.name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.getData();\n    };\n\n    this.getData = () => {\n      this.setState({\n        dispSpinner: true\n      }); //Construct the API Get Request from search term and filters\n\n      let getRequestURL = \"/courses?search=\";\n\n      if (this.state.input !== \"\") {\n        getRequestURL = getRequestURL.concat(this.state.input.replaceAll(\"&\", \"%26\").replaceAll(\"/\", \"%2F\").replaceAll(\"=\", \"%3D\").replaceAll(\"?\", \"%3F\"));\n      }\n\n      if (this.state.faculty !== \"\") {\n        getRequestURL = getRequestURL.concat(\"&faculty=\").concat(this.state.faculty.replaceAll(\"&\", \"%26\").replaceAll(\"/\", \"%2F\").replaceAll(\"=\", \"%3D\").replaceAll(\"?\", \"%3F\"));\n      }\n\n      if (this.state.department !== \"\") {\n        getRequestURL = getRequestURL.concat(\"&department=\").concat(this.state.department.replaceAll(\"&\", \"%26\").replaceAll(\"/\", \"%2F\").replaceAll(\"=\", \"%3D\").replaceAll(\"?\", \"%3F\"));\n      }\n\n      if (this.state.minLevel !== \"none\") {\n        getRequestURL = getRequestURL.concat(\"&minLevel=\").concat(this.state.minLevel);\n      }\n\n      if (this.state.maxLevel !== \"none\") {\n        getRequestURL = getRequestURL.concat(\"&maxLevel=\").concat(this.state.maxLevel);\n      } //Do not call API if user enters no params\n\n\n      if (getRequestURL === \"/courses?search=\") {\n        let result_temp = [];\n        result_temp.push( /*#__PURE__*/_jsxDEV(Result, {\n          course_id: \"\",\n          course_code: \"NO_PARAMS_ENTERED\",\n          course_name: \"\",\n          course_faculty: \"\",\n          course_department: \"\"\n        }, \"\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this));\n        this.setState({\n          results: result_temp\n        });\n        this.setState({\n          dispSpinner: false\n        });\n      } //Call API with the get request\n      else {\n        axios.get(getRequestURL).then(res => {\n          if (res.status === 200) {\n            this.setState({\n              results: []\n            });\n            console.log(res.data);\n\n            if (res.data.length > 0) {\n              let len = res.data.length;\n              let result_temp = [];\n              result_temp.push( /*#__PURE__*/_jsxDEV(Label, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 34\n              }, this));\n\n              for (let i = 0; i < len; i++) {\n                result_temp.push( /*#__PURE__*/_jsxDEV(ResultCompare, {\n                  course_id: res.data[i]._id,\n                  course_code: res.data[i].Code,\n                  course_name: res.data[i].Name,\n                  course_faculty: res.data[i].Faculty,\n                  course_department: res.data[i].Department,\n                  course_description: res.data[i][\"Course Description\"],\n                  course_pre: res.data[i][\"Pre-requisites\"],\n                  setCourse1: this.props.setCourse1,\n                  setCourse2: this.props.setCourse2,\n                  course1: this.props.course1,\n                  course2: this.props.course2\n                }, res.data[i]._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 21\n                }, this));\n              }\n\n              this.setState({\n                results: result_temp\n              });\n            } else {\n              alert(\"Course not found\");\n            }\n          } else if (res.status === 500) {\n            alert(\"System Error. Please refresh\");\n          }\n\n          this.setState({\n            dispSpinner: false\n          });\n        }).catch(() => {\n          let result_temp = [];\n          result_temp.push( /*#__PURE__*/_jsxDEV(Result, {\n            course_id: \"\",\n            course_code: \"No results found.\",\n            course_name: \"\",\n            course_faculty: \"\",\n            course_department: \"\"\n          }, \"\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this));\n          this.setState({\n            results: result_temp\n          });\n          this.setState({\n            dispSpinner: false\n          });\n        });\n      }\n\n      ;\n    };\n\n    this.state = {\n      //Dropdown values\n      faculties: [],\n      departments: [],\n      //Query params\n      input: \"\",\n      faculty: \"\",\n      department: \"\",\n      minLevel: \"none\",\n      maxLevel: \"none\",\n      //Show loading animation when True\n      dispSpinner: false,\n      //Query results\n      results: []\n    };\n  } // Get  drodown values from DB before rendering page\n\n\n  async componentDidMount() {\n    this.setState({\n      dispSpinner: true\n    }); //Need array of dictionaries to populate dropdown calues\n\n    let arr = await getDropdownValues('faculties');\n    let arr_dict = [];\n\n    for (var i = 0; i < arr.length; i++) {\n      arr_dict.push({\n        value: arr[i],\n        text: arr[i]\n      });\n    }\n\n    this.setState({\n      faculties: arr_dict\n    });\n    arr = await getDropdownValues('departments');\n    arr_dict = [];\n\n    for (i = 0; i < arr.length; i++) {\n      arr_dict.push({\n        value: arr[i],\n        text: arr[i]\n      });\n    }\n\n    this.setState({\n      departments: arr_dict\n    });\n    this.setState({\n      dispSpinner: false\n    });\n  }\n\n  render() {\n    return this.state.dispSpinner ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 14\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SearchQuery\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"10%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Education Pathways\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit,\n          className: \"search\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            placeholder: \"Enter a course code, title, keyword...\",\n            className: \"text-input\",\n            type: \"text\",\n            name: \"input\",\n            value: this.state.input,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Search\",\n            className: \"submit-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"faculty\",\n            children: \"Faculty:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"faculty\",\n            onChange: this.handleChange,\n            value: this.state.faculty,\n            className: \"dropdown\",\n            id: \"faculty\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              className: \"dropdown\",\n              selected: \"selected\",\n              children: \"any\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 31\n            }, this), this.state.faculties.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.value,\n              className: \"dropdown\",\n              children: option.text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 43\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"department\",\n            children: \"Department:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"department\",\n            onChange: this.handleChange,\n            value: this.state.department,\n            className: \"dropdown\",\n            id: \"department\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              className: \"dropdown\",\n              selected: \"selected\",\n              children: \"any\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 31\n            }, this), this.state.departments.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.value,\n              className: \"dropdown\",\n              children: option.text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 43\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"minLevel\",\n            children: \"Min. Level:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"minLevel\",\n            onChange: this.handleChange,\n            value: this.state.minLevel,\n            className: \"dropdown\",\n            id: \"minLevel\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"none\",\n              className: \"dropdown\",\n              selected: \"selected\",\n              children: \"none\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 31\n            }, this), arrayDictNumbers(0, 7).map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.value,\n              className: \"dropdown\",\n              children: option.text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 39\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"maxLevel\",\n            children: \"Max. Level:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"maxLevel\",\n            onChange: this.handleChange,\n            value: this.state.maxLevel,\n            className: \"dropdown\",\n            id: \"maxLevel\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"none\",\n              className: \"dropdown\",\n              selected: \"selected\",\n              children: \"none\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 31\n            }, this), arrayDictNumbers(0, 7).map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.value,\n              className: \"dropdown\",\n              children: option.text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 39\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-result-display\",\n        children: this.state.results\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 15\n    }, this);\n  }\n\n}\n\nexport default SearchBarCompare;","map":{"version":3,"sources":["C:/Users/nissa/Desktop/SKULE/4th Year/ECE444/code/project-1-web-application-design-education-pathways-group-1-agility/Education_Pathways/frontend/src/components/SearchCompare.js"],"names":["React","Component","axios","Result","Spinner","Label","ResultCompare","getDropdownValues","s","dropdownValues","res","get","concat","data","error","arrayDictNumbers","minVal","maxVal","arr_dict","i","push","value","toString","text","SearchBarCompare","constructor","handleChange","event","target","setState","name","handleSubmit","preventDefault","getData","dispSpinner","getRequestURL","state","input","replaceAll","faculty","department","minLevel","maxLevel","result_temp","results","then","status","console","log","length","len","_id","Code","Name","Faculty","Department","props","setCourse1","setCourse2","course1","course2","alert","catch","faculties","departments","componentDidMount","arr","render","marginTop","map","option","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"../axiosInstance/AxiosInstance\";\r\nimport Result from \"./Results\";\r\nimport Spinner from \"./Spinner\";\r\nimport \"./css/Result.css\";\r\nimport Label from \"./Label\";\r\nimport \"./css/styles.css\";\r\nimport ResultCompare from \"./ResultCompare\";\r\n\r\n//Returns an array of unique values for the given database attribute, s\r\nasync function getDropdownValues(s) {\r\n  let dropdownValues = []\r\n  try {\r\n      let res = await axios.get('/courses/'.concat(s));\r\n      dropdownValues = res.data;\r\n  } catch (error) {\r\n      dropdownValues = [\"Error. Failed to retrieve dropdown values\"];\r\n  }\r\n  return dropdownValues;\r\n};\r\n\r\n// Returns An array of dictionaries for numerical dropdown values  Used for\r\n// minLevel and maxLevel dropdowns\r\nfunction arrayDictNumbers(minVal, maxVal) {\r\n  let arr_dict = [];\r\n  for (var i = minVal; i <= maxVal; i++) {\r\n      arr_dict.push({value: i.toString(), text: i.toString()})\r\n  };\r\n  return arr_dict;\r\n}\r\n\r\n// The primary component of this file. Allows users to search, filter, and\r\n// access results\r\nclass SearchBarCompare extends Component {\r\n  constructor() {\r\n      super();\r\n      this.state = {\r\n          //Dropdown values\r\n          faculties: [],\r\n          departments: [],\r\n          //Query params\r\n          input: \"\",\r\n          faculty: \"\",\r\n          department: \"\",\r\n          minLevel: \"none\",\r\n          maxLevel: \"none\",\r\n          //Show loading animation when True\r\n          dispSpinner: false,\r\n          //Query results\r\n          results: []\r\n      };\r\n  }\r\n\r\n  // Get  drodown values from DB before rendering page\r\n  async componentDidMount() {\r\n      this.setState({dispSpinner: true});\r\n\r\n      //Need array of dictionaries to populate dropdown calues\r\n      let arr = await getDropdownValues('faculties')\r\n      let arr_dict = []\r\n      for (var i = 0; i < arr.length; i++) {\r\n          arr_dict.push({value: arr[i], text: arr[i]})\r\n      }\r\n      this.setState({faculties: arr_dict})\r\n      arr = await getDropdownValues('departments')\r\n      arr_dict = []\r\n      for (i = 0; i < arr.length; i++) {\r\n          arr_dict.push({value: arr[i], text: arr[i]})\r\n      }\r\n      this.setState({departments: arr_dict})\r\n\r\n      this.setState({dispSpinner: false});\r\n  }\r\n\r\n  handleChange = (event) => {\r\n      const value = event.target.value;\r\n      this.setState({\r\n          [event.target.name]: value\r\n      });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      this.getData();\r\n  };\r\n\r\n  getData = () => {\r\n      this.setState({dispSpinner: true});\r\n      //Construct the API Get Request from search term and filters\r\n      let getRequestURL = \"/courses?search=\"\r\n      if (this.state.input !== \"\") {\r\n          getRequestURL = getRequestURL\r\n              .concat(\r\n                  this.state.input\r\n                      .replaceAll(\"&\", \"%26\")\r\n                      .replaceAll(\"/\", \"%2F\")\r\n                      .replaceAll(\"=\", \"%3D\")\r\n                      .replaceAll(\"?\", \"%3F\")\r\n              );\r\n      }\r\n      if (this.state.faculty !== \"\") {\r\n          getRequestURL = getRequestURL\r\n              .concat(\"&faculty=\")\r\n              .concat(\r\n                  this.state.faculty\r\n                      .replaceAll(\"&\", \"%26\")\r\n                      .replaceAll(\"/\", \"%2F\")\r\n                      .replaceAll(\"=\", \"%3D\")\r\n                      .replaceAll(\"?\", \"%3F\")\r\n              );\r\n      }\r\n      if (this.state.department !== \"\") {\r\n          getRequestURL = getRequestURL\r\n              .concat(\"&department=\")\r\n              .concat(\r\n                  this.state.department\r\n                      .replaceAll(\"&\", \"%26\")\r\n                      .replaceAll(\"/\", \"%2F\")\r\n                      .replaceAll(\"=\", \"%3D\")\r\n                      .replaceAll(\"?\", \"%3F\")\r\n              );\r\n      }\r\n      if (this.state.minLevel !== \"none\") {\r\n          getRequestURL = getRequestURL\r\n              .concat(\"&minLevel=\")\r\n              .concat(this.state.minLevel);\r\n      }\r\n      if (this.state.maxLevel !== \"none\") {\r\n          getRequestURL = getRequestURL\r\n              .concat(\"&maxLevel=\")\r\n              .concat(this.state.maxLevel);\r\n      }\r\n\r\n      //Do not call API if user enters no params\r\n      if (getRequestURL === \"/courses?search=\") {\r\n          let result_temp = [];\r\n          result_temp.push(\r\n              <Result\r\n                  key={\"\"}\r\n                  course_id={\"\"}\r\n                  course_code={\"NO_PARAMS_ENTERED\"}\r\n                  course_name={\"\"}\r\n                  course_faculty={\"\"}\r\n                  course_department={\"\"}\r\n              ></Result>\r\n          );\r\n          this.setState({results: result_temp});\r\n          this.setState({dispSpinner: false});\r\n      }\r\n      //Call API with the get request\r\n      else{\r\n        axios\r\n          .get(getRequestURL)\r\n          .then((res) => {\r\n            if (res.status === 200) {\r\n              this.setState({ results: [] });\r\n              console.log(res.data);\r\n              if (res.data.length > 0) {\r\n                let len = res.data.length;\r\n                let result_temp = [];\r\n                result_temp.push(<Label></Label>);\r\n                for (let i = 0; i < len; i++) {\r\n                  result_temp.push(\r\n                    <ResultCompare\r\n                      key={res.data[i]._id}\r\n                      course_id={res.data[i]._id}\r\n                      course_code={res.data[i].Code}\r\n                      course_name={res.data[i].Name}\r\n                      course_faculty={res.data[i].Faculty}\r\n                      course_department={res.data[i].Department}\r\n                      course_description={res.data[i][\"Course Description\"]}\r\n                      course_pre={res.data[i][\"Pre-requisites\"]}\r\n                      setCourse1={this.props.setCourse1}\r\n                      setCourse2={this.props.setCourse2}\r\n                      course1={this.props.course1}\r\n                      course2={this.props.course2}\r\n                    ></ResultCompare>\r\n                  );\r\n                }\r\n                this.setState({ results: result_temp });\r\n              } else {\r\n                alert(\"Course not found\");\r\n              }\r\n            } else if (res.status === 500) {\r\n              alert(\"System Error. Please refresh\");\r\n            }\r\n            this.setState({ dispSpinner: false });\r\n          })\r\n          .catch(() => {\r\n            let result_temp = [];\r\n            result_temp.push(\r\n              <Result\r\n                key={\"\"}\r\n                course_id={\"\"}\r\n                course_code={\"No results found.\"}\r\n                course_name={\"\"}\r\n                course_faculty={\"\"}\r\n                course_department={\"\"}\r\n              ></Result>\r\n            );\r\n            this.setState({ results: result_temp });\r\n            this.setState({ dispSpinner: false });\r\n        });\r\n  };\r\n}\r\n\r\n  render() {\r\n      return this.state.dispSpinner\r\n          ? (<Spinner/>)\r\n          : (\r\n              <div className=\"SearchQuery\">\r\n                  <div\r\n                      style={{\r\n                          marginTop: \"10%\"\r\n                      }}>\r\n                      <h1>\r\n                          Education Pathways</h1>\r\n                      <br></br>\r\n                      <form onSubmit={this.handleSubmit} className={\"search\"}>\r\n                          <input\r\n                              placeholder={\"Enter a course code, title, keyword...\"}\r\n                              className={\"text-input\"}\r\n                              type=\"text\"\r\n                              name=\"input\"\r\n                              value={this.state.input}\r\n                              onChange={this.handleChange}/>\r\n                          <input type=\"submit\" value=\"Search\" className={\"submit-button\"}/>\r\n                          <br></br>\r\n                          <br></br>\r\n                          <label for=\"faculty\">Faculty:</label>\r\n                          <select\r\n                              name=\"faculty\"\r\n                              onChange={this.handleChange}\r\n                              value={this.state.faculty}\r\n                              className={\"dropdown\"}\r\n                              id=\"faculty\">\r\n                              <option value=\"\" className={\"dropdown\"} selected=\"selected\">any</option>\r\n                              {\r\n                                  this\r\n                                      .state\r\n                                      .faculties\r\n                                      .map((option, index) => (\r\n                                          <option key={index} value={option.value} className={\"dropdown\"}>\r\n                                              {option.text}\r\n                                          </option>\r\n                                      ))\r\n                              }\r\n                          </select>\r\n                          <br></br>\r\n                          <br></br>\r\n                          <label for=\"department\">Department:</label>\r\n                          <select\r\n                              name=\"department\"\r\n                              onChange={this.handleChange}\r\n                              value={this.state.department}\r\n                              className={\"dropdown\"}\r\n                              id=\"department\">\r\n                              <option value=\"\" className={\"dropdown\"} selected=\"selected\">any</option>\r\n                              {\r\n                                  this\r\n                                      .state\r\n                                      .departments\r\n                                      .map((option, index) => (\r\n                                          <option key={index} value={option.value} className={\"dropdown\"}>\r\n                                              {option.text}\r\n                                          </option>\r\n                                      ))\r\n                              }\r\n                          </select>\r\n                          <br></br>\r\n                          <br></br>\r\n                          <label for=\"minLevel\">Min. Level:</label>\r\n                          <select\r\n                              name=\"minLevel\"\r\n                              onChange={this.handleChange}\r\n                              value={this.state.minLevel}\r\n                              className={\"dropdown\"}\r\n                              id=\"minLevel\">\r\n                              <option value=\"none\" className={\"dropdown\"} selected=\"selected\">none</option>\r\n                              {\r\n                                  arrayDictNumbers(0, 7).map((option, index) => (\r\n                                      <option key={index} value={option.value} className={\"dropdown\"}>\r\n                                          {option.text}\r\n                                      </option>\r\n                                  ))\r\n                              }\r\n                          </select>\r\n                          <b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b>\r\n                          <label for=\"maxLevel\">Max. Level:</label>\r\n                          <select\r\n                              name=\"maxLevel\"\r\n                              onChange={this.handleChange}\r\n                              value={this.state.maxLevel}\r\n                              className={\"dropdown\"}\r\n                              id=\"maxLevel\">\r\n                              <option value=\"none\" className={\"dropdown\"} selected=\"selected\">none</option>\r\n                              {\r\n                                  arrayDictNumbers(0, 7).map((option, index) => (\r\n                                      <option key={index} value={option.value} className={\"dropdown\"}>\r\n                                          {option.text}\r\n                                      </option>\r\n                                  ))\r\n                              }\r\n                          </select>\r\n                      </form>\r\n                  </div>\r\n                  <div className={\"search-result-display\"}>{this.state.results}</div>\r\n              </div>\r\n          );\r\n  }\r\n}\r\n\r\nexport default SearchBarCompare;\r\n"]},"metadata":{},"sourceType":"module"}